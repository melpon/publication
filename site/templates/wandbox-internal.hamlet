<slide .segue .dark>
  <hgroup>
    <h2>Wandbox の中身

<slide>
  <hgroup>
    <h2>目次
  <article>
    <ul>
      <li>牛舎と犬小屋の関係
      <li>牛舎
      <li>犬小屋
        <ul>
          <li>Yesod
          <li>Templates
          <li>EventSource

<slide>
  <hgroup>
    <h2>牛舎と犬小屋の関係
  <article>
    <ul>
      <li>牛舎と犬小屋の関係
      <li .context>牛舎
      <li .context>犬小屋
        <ul>
          <li>Yesod
          <li>Templates
          <li>EventSource

<slide>
  <hgroup>
    <h2>牛舎と犬小屋の関係
  <article>
    <h3>Wandbox は、大きく２つのモジュールに分けられる
    <ul .build>
      <li>牛舎（cattleshed）
        <ul>
          <li>ソースを与えるとコンパイルや実行をして結果を返してくれるモジュール
          <li>Wandbox のコア
          <li><a href="https://twitter.com/kikairoya">@kikairoya</a> 作
          <li>C++ で書かれてる
          <li>読めない
      <li>犬小屋（kennel）
        <ul>
          <li>ユーザからの HTTP リクエストを受けて牛舎とやりとりするモジュール
          <li>Wandbox の UI
          <li><a href="https://twitter.com/melponn">@melponn</a> 作
          <li>Haskell で書かれてる
          <li>読めない

<slide>
  <hgroup>
    <h2>牛舎と犬小屋の関係
  <article .flexbox .vcenter>
    <img .reflect src=@{StaticR img_wandbox_actor_png} alt="牛舎と犬小屋の関係">

<slide>
  <hgroup>
    <h2>牛舎
  <article>
    <ul>
      <li .context>牛舎と犬小屋の関係
      <li>牛舎
      <li .context>犬小屋
        <ul>
          <li>Yesod
          <li>Templates
          <li>EventSource

<slide>
  <hgroup>
    <h2>牛舎
  <article>
    <ul>
      <li .red>よく分からない仕組みで動いてる
      <li>基本的にはコンパイルして実行するだけ
      <li>ほんとに何でもできてしまうと困るので、制限を掛けたりしている
        <ul>
          <li>chroot を使って環境を閉じ込める
          <li>実行時間が長いなら kill
          <li>リソース使用量が多いなら kill
          <li>標準出力量が多いなら kill

<slide>
  <hgroup>
    <h2>牛舎
  <article .flexbox .vcenter>
    <h2>詳しいことは <a href="https://twitter.com/kikairoya">@kikairoya</a> を問い詰めよう

<slide>
  <hgroup>
    <h2>犬小屋 - Yesod
  <article>
    <ul>
      <li .context>牛舎と犬小屋の関係
      <li .context>牛舎
      <li>犬小屋
        <ul>
          <li>Yesod
          <li .context>Templates
          <li .context>EventSource

<slide>
  <hgroup>
    <h2>犬小屋 - Yesod
  <article>
    <h3><a href="http://www.yesodweb.com/">Yesod</a> という Haskell の Web フレームワークで作ってる
    <div .build>
      <h3>なぜなら
      <ul>
        <li .build>あの頃はまだ純粋な Haskell 信者だった
          <ul>
            <li>型安全すごい
            <li>関数合成楽しい
            <li>モナドさん可愛い
        <li .build>Haskell できますって言いたかった
          <ul>
            <li>Haskell できるとかっこ良さそう

<slide>
  <hgroup>
    <h2>犬小屋 - Yesod
  <article>
    <h3><a href="http://www.yesodweb.com/">Yesod</a> という Haskell の Web フレームワークで作ってる
    <h3>実際のところ
    <ul>
      <li .context>あの頃はまだ純粋な Haskell 信者だった
      <li .build>→副作用を知ってから Haskell はただの難しい言語
        <ul>
          <li>あの純粋な気持ちはどこへ
          <li>とはいえ、やはりいろいろ便利な言語ではある
      <li .context>Haskell できますって言いたかった
      <li .build>→この程度だと Haskell できますとか言えない
        <ul>
          <li>未だにモナドの作り方分からない
          <li>未だに型の読み方が分からない
          <li>それでもこんな Web アプリケーションぐらいなら書ける

<slide>
  <hgroup>
    <h2>犬小屋 - Templates
  <article>
    <ul>
      <li .context>牛舎と犬小屋の関係
      <li .context>牛舎
      <li>犬小屋
        <ul>
          <li .context>Yesod
          <li>Templates
          <li .context>EventSource

<slide>
  <hgroup>
    <h2>犬小屋 - Templates
  <article>
    <h3>HTML, CSS, JavaScript
    <ul>
      <li>それぞれ hamlet, lucius, julius という Yesod のテンプレート言語がある

<slide>
  <hgroup>
    <h2>犬小屋 - Templates
  <article>
    <h3>hamlet
    <pre .prettyprint .lang-html data-lang="hamlet">#{sourceHamletSample1}
    <ul>
      <li>インデントベースの HTML
      <li>class と id の省略表記
      <li>直接書いても辛くない

<slide>
  <hgroup>
    <h2>犬小屋 - Templates
  <article>
    <h3>hamlet
    <pre .prettyprint .lang-html data-lang="html">#{sourceHamletSample1Html}
    <ul>
      <li>HTML はつらい

<slide>
  <hgroup>
    <h2>犬小屋 - Templates
  <article>
    <h3>hamlet
    <pre .prettyprint .lang-html data-lang="hamlet">#{sourceHamletSample2}
    <ul>
      <li>Haskell コードの埋め込み
      <li>最低限の制御構文

<slide>
  <hgroup>
    <h2>犬小屋 - Templates
  <article>
    <h3>lucius
    <pre .prettyprint .lang-css data-lang="lucius">#{sourceLuciusSample}
    <ul>
      <li>大体ただの CSS
      <li>CSS コピペでも動くレベル
      <li>変数も宣言できる

<slide>
  <hgroup>
    <h2>犬小屋 - Templates
  <article>
    <h3>lucius
    <pre .prettyprint .lang-css data-lang="css">#{sourceLuciusSampleCss}
    <ul>
      <li>こんなコードになる

<slide>
  <hgroup>
    <h2>犬小屋 - Templates
  <article>
    <h3>julius
    <pre .prettyprint .lang-javascript data-lang="julius">#{sourceJuliusSample}
    <ul>
      <li>ほぼ JavaScript
      <li>Haskell コードを埋め込める
      <li .red>JavaScript つらい

<slide>
  <hgroup>
    <h2>犬小屋 - Templates
  <article>
    <h3>JavaScript つらい
    <div .build>
      <pre>
        <code>$ cat **/*.hs | wc -l<br>781
      <pre>
        <code>$ cat **/*.hamlet | wc -l<br>87
      <pre>
        <code>$ cat **/*.lucius | wc -l<br>71
      <pre>
        <code>$ cat **/*.julius | wc -l<br>552
      <ul>
        <li>ありのまま今起こったことを話すぜ！
        <li>『Haskell を勉強していたと思ったらいつの間にか JavaScript を書いていた』

<slide>
  <hgroup>
    <h2>犬小屋 - EventSource
  <article>
    <ul>
      <li .context>牛舎と犬小屋の関係
      <li .context>牛舎
      <li>犬小屋
        <ul>
          <li .context>Yesod
          <li .context>Templates
          <li>EventSource

<slide>
  <hgroup>
    <h2>犬小屋 - EventSource
  <article>
    <h3>リアルタイム出力
    <pre .prettyprint .lang-haskell data-lang="haskell">#{sourceLoopSample}
    <ul>
      <li>コードの実行中に出力が表示される
      <li>フィードバックが早いので手を止めずに済む

<slide>
  <hgroup>
    <h2>犬小屋 - EventSource
  <article>
    <h3>リアルタイム出力の仕組み
    <ul>
      <li><a href="http://www.w3.org/TR/eventsource/">EventSource</a> を使ってる
      <li>要するに単なるロングポーリング
        <ul>
          <li>普通の HTTP はサーバがレスポンスを返したら終わり
          <li>EventSource はレスポンスを最初は途中までしか返さない
          <li>受信が終わってないのでクライアントはデータを待ち続ける

<!--
TODO: EventSource の仕組みを書く
-->

<slide>
  <hgroup>
    <h2>犬小屋 - EventSource
  <article>
    <h3>Q. WebSocket 使わないの？
    <h3>A. この型の意味を理解できる者だけが WebSocket を使いなさい
    <iframe data-src="http://hackage.haskell.org/package/wai-websockets/docs/Network-Wai-Handler-WebSockets.html">
